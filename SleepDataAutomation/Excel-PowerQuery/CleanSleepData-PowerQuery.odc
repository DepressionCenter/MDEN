<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - FinalOutput</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'FinalOutput' query in the workbook.</o:Description>
  <o:Name>Query - FinalOutput</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=FinalOutput;Extended Properties=</odc:ConnectionString>
   <odc:CommandType>TableCollection</odc:CommandType>
   <odc:CommandText>&quot;FinalOutput&quot;</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.124.628.0&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;en-US&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;CSV-Directory&quot;&gt;&lt;Description&gt;Enter the path to the directory containing the CSV files from Fitbit, Fitabase and Power Automate.&lt;/Description&gt;&lt;Formula&gt;&lt;![CDATA[&quot;C:\git\MDEN\SleepDataAutomation\Excel-PowerQuery\CSV&quot; meta [IsParameterQuery=true, Type=&quot;Text&quot;, IsParameterQueryRequired=true]]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;30secondSleepStages_merged&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Csv.Document(File.Contents(#&quot;CSV-Directory&quot; &amp; &quot;\30secondSleepStages_merged.csv&quot;),[Delimiter=&quot;,&quot;, Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),&#13;&#10;    #&quot;Promoted Headers&quot; = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Promoted Headers&quot;,{{&quot;Id&quot;, type text}, {&quot;LogId&quot;, type text}, {&quot;Time&quot;, type datetime}, {&quot;Level&quot;, type text}, {&quot;ShortWakes&quot;, type text}, {&quot;SleepStage&quot;, type text}}),&#13;&#10;    #&quot;Renamed Columns - Participant Id&quot; = Table.RenameColumns(#&quot;Changed Type&quot;,{{&quot;Id&quot;, &quot;ParticipantId&quot;}})&#13;&#10;in&#13;&#10;    #&quot;Renamed Columns - Participant Id&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;CleanFitbitSleepStages&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = #&quot;30secondSleepStages_merged&quot;,&#13;&#10;    #&quot;Uppercased Text - Participant ID&quot; = Table.TransformColumns(Source,{{&quot;ParticipantId&quot;, Text.Upper, type text}}),&#13;&#10;    #&quot;Lowercased Text - Stages&quot; = Table.TransformColumns(#&quot;Uppercased Text - Participant ID&quot;,{{&quot;Level&quot;, Text.Lower, type text}, {&quot;ShortWakes&quot;, Text.Lower, type text}, {&quot;SleepStage&quot;, Text.Lower, type text}})&#13;&#10;in&#13;&#10;    #&quot;Lowercased Text - Stages&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;MainSleepEpisodes&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = CleanFitbitSleepStages,&#13;&#10;    #&quot;Filter Out Short Wakes&quot; = Table.SelectRows(Source, each [ShortWakes] &lt;&gt; &quot;wake&quot;),&#13;&#10;    #&quot;Filter Out Wake Level&quot; = Table.SelectRows(#&quot;Filter Out Short Wakes&quot;, each [Level] &lt;&gt; &quot;wake&quot;),&#13;&#10;    #&quot;Group by LogId, Get Min Max&quot; = Table.Group(#&quot;Filter Out Wake Level&quot;, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, {{&quot;SleepOnsetDateTime&quot;, each List.Min([Time]), type nullable datetime}, {&quot;WakeDateTime&quot;, each List.Max([Time]), type nullable datetime}, {&quot;TotalSleepTime30SecBlocks&quot;, each Table.RowCount(_), Int64.Type}}),&#13;&#10;    #&quot;Calculate Sleep Date&quot; = Table.AddColumn(#&quot;Group by LogId, Get Min Max&quot;, &quot;SleepDate&quot;, each if Time.From([SleepOnsetDateTime]) &gt;= #time(12,00,00) then Date.From([SleepOnsetDateTime]) else Date.AddDays(Date.From([SleepOnsetDateTime]), -1), Date.Type),&#13;&#10;    #&quot;Reordered Columns SleepDate&quot; = Table.ReorderColumns(#&quot;Calculate Sleep Date&quot;,{&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;, &quot;SleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;}),&#13;&#10;    #&quot;Grouped Rows - Daily Sleep Episodes&quot; = Table.Group(#&quot;Reordered Columns SleepDate&quot;, {&quot;ParticipantId&quot;, &quot;SleepDate&quot;}, {{&quot;NumberOfSleepEpisodes&quot;, each Table.RowCount(_), Int64.Type}, {&quot;DayDetails&quot;, each _, type table [ParticipantId=text, LogId=nullable text, SleepDate=date, SleepOnsetDateTime=nullable datetime, TotalSleepTime30SecBlocks=number, WakeDateTime=nullable datetime]}}),&#13;&#10;    #&quot;Find Main Sleep Episode&quot; = Table.AddColumn(#&quot;Grouped Rows - Daily Sleep Episodes&quot;, &quot;MainSleepEpisodeDetails&quot;, each Table.Max([DayDetails], if #&quot;Main Sleep Detection Type&quot; = &quot;Longest Episode&quot; then &quot;TotalSleepTime30SecBlocks&quot; else if #&quot;Main Sleep Detection Type&quot; = &quot;Last Episode&quot; then &quot;SleepOnsetDateTime&quot; else &quot;TotalSleepTime30SecBlocks&quot; )),&#13;&#10;    #&quot;Expanded MainSleepEpisodeDetails&quot; = Table.ExpandRecordColumn(#&quot;Find Main Sleep Episode&quot;, &quot;MainSleepEpisodeDetails&quot;, {&quot;LogId&quot;, &quot;SleepOnsetDateTime&quot;, &quot;TotalSleepTime30SecBlocks&quot;, &quot;WakeDateTime&quot;}, {&quot;MainSleepEpisodeDetails.LogId&quot;, &quot;MainSleepEpisodeDetails.SleepOnsetDateTime&quot;, &quot;MainSleepEpisodeDetails.TotalSleepTime30SecBlocks&quot;, &quot;MainSleepEpisodeDetails.WakeDateTime&quot;}),&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(#&quot;Expanded MainSleepEpisodeDetails&quot;,{&quot;ParticipantId&quot;, &quot;SleepDate&quot;, &quot;MainSleepEpisodeDetails.LogId&quot;, &quot;MainSleepEpisodeDetails.SleepOnsetDateTime&quot;, &quot;MainSleepEpisodeDetails.TotalSleepTime30SecBlocks&quot;, &quot;MainSleepEpisodeDetails.WakeDateTime&quot;}),&#13;&#10;    #&quot;Renamed Columns&quot; = Table.RenameColumns(#&quot;Removed Other Columns&quot;,{{&quot;MainSleepEpisodeDetails.LogId&quot;, &quot;LogId&quot;}, {&quot;MainSleepEpisodeDetails.SleepOnsetDateTime&quot;, &quot;SleepOnsetDateTime&quot;}, {&quot;MainSleepEpisodeDetails.WakeDateTime&quot;, &quot;WakeDateTime&quot;}, {&quot;MainSleepEpisodeDetails.TotalSleepTime30SecBlocks&quot;, &quot;TotalSleepTime30SecBlocks&quot;}}),&#13;&#10;    #&quot;Reordered Columns&quot; = Table.ReorderColumns(#&quot;Renamed Columns&quot;,{&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;, &quot;SleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;, &quot;TotalSleepTime30SecBlocks&quot;}),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Reordered Columns&quot;,{{&quot;WakeDateTime&quot;, type datetime}, {&quot;SleepOnsetDateTime&quot;, type datetime}, {&quot;TotalSleepTime30SecBlocks&quot;, Int64.Type}})&#13;&#10;in&#13;&#10;    #&quot;Changed Type&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;Main Sleep Detection Type&quot;&gt;&lt;Description&gt;Select the method for differentiating the main sleep episode from naps.&lt;/Description&gt;&lt;Formula&gt;&lt;![CDATA[&quot;Longest Episode&quot; meta [IsParameterQuery=true, List={&quot;Longest Episode&quot;, &quot;Last Episode&quot;}, DefaultValue=&quot;Longest Episode&quot;, Type=&quot;Text&quot;, IsParameterQueryRequired=true]]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;EmailSleepMarkers&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Excel.Workbook(File.Contents(#&quot;CSV-Directory&quot; &amp; &quot;\EmailSleepMarkers.xlsx&quot;), null, true),&#13;&#10;    ProcessedMessages_Table = Source{[Item=&quot;ProcessedMessages&quot;,Kind=&quot;Table&quot;]}[Data],&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(ProcessedMessages_Table,{{&quot;ParticipantID&quot;, type text}, {&quot;SleepDatetime&quot;, type datetime}, {&quot;WakeDatetime&quot;, type datetime}, {&quot;MessageDatetime&quot;, type datetime}, {&quot;FromAddress&quot;, type text}, {&quot;MessageBody&quot;, type text}, {&quot;AttachmentContents&quot;, type text}}),&#13;&#10;    #&quot;Renamed Columns ParticipantId&quot; = Table.RenameColumns(#&quot;Changed Type&quot;,{{&quot;ParticipantID&quot;, &quot;ParticipantId&quot;}}),&#13;&#10;    #&quot;Cleaned Text ParticipantId&quot; = Table.TransformColumns(#&quot;Renamed Columns ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Clean, type text}}),&#13;&#10;    #&quot;Trimmed Text ParticipantId&quot; = Table.TransformColumns(#&quot;Cleaned Text ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Trim, type text}}),&#13;&#10;    #&quot;Uppercased Text ParticipantId&quot; = Table.TransformColumns(#&quot;Trimmed Text ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Upper, type text}}),&#13;&#10;    #&quot;Replaced Value IO to I0&quot; = Table.ReplaceValue(#&quot;Uppercased Text ParticipantId&quot;,&quot;IO&quot;,&quot;I0&quot;,Replacer.ReplaceText,{&quot;ParticipantId&quot;})&#13;&#10;in&#13;&#10;    #&quot;Replaced Value IO to I0&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;CleanEmailSleepMarkers&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = EmailSleepMarkers,&#13;&#10;    #&quot;Calculate Sleep Date&quot; = Table.AddColumn(Source, &quot;SleepDate&quot;, each if [SleepDatetime] is null then Date.AddDays(Date.From([WakeDatetime]), -1) else if Time.From([SleepDatetime]) &gt;= #time(12,00,00) then Date.From([SleepDatetime]) else Date.AddDays(Date.From([SleepDatetime]), -1), Date.Type),&#13;&#10;    #&quot;Reordered Columns SleepDate&quot; = Table.ReorderColumns(#&quot;Calculate Sleep Date&quot;,{&quot;ParticipantId&quot;, &quot;SleepDate&quot;, &quot;SleepDatetime&quot;, &quot;WakeDatetime&quot;, &quot;MessageDatetime&quot;, &quot;FromAddress&quot;, &quot;MessageBody&quot;, &quot;AttachmentContents&quot;}),&#13;&#10;    #&quot;Grouped Rows&quot; = Table.Group(#&quot;Reordered Columns SleepDate&quot;, {&quot;ParticipantId&quot;, &quot;SleepDate&quot;}, {{&quot;SleepOnsetDateTime&quot;, each List.Min([SleepDatetime]), type nullable datetime}, {&quot;WakeDateTime&quot;, each List.Max([WakeDatetime]), type nullable datetime}})&#13;&#10;in&#13;&#10;    #&quot;Grouped Rows&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;SleepTimeOverrides&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Excel.Workbook(File.Contents( Text.Replace( #&quot;CSV-Directory&quot; &amp; &quot;\OverrideFile.xlsx&quot; , &quot;\&quot;&amp;&quot;\&quot; , &quot;\&quot;) ), null, true),&#13;&#10;    SleepTimeOverrides_Table = Source{[Item=&quot;SleepTimeOverrides&quot;,Kind=&quot;Table&quot;]}[Data],&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(SleepTimeOverrides_Table,{{&quot;ParticipantId&quot;, type text}, {&quot;SleepDate&quot;, type date}, {&quot;OverrideSleepTime&quot;, type nullable datetime}, {&quot;OverrideWakeupTime&quot;, type nullable datetime}, {&quot;OverrideReason&quot;, type nullable text}})&#13;&#10;in&#13;&#10;    #&quot;Changed Type&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;CleanSleepTimeOverrides&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = SleepTimeOverrides,&#13;&#10;    #&quot;Cleaned Text ParticipantId&quot; = Table.TransformColumns(Source,{{&quot;ParticipantId&quot;, Text.Clean, type text}}),&#13;&#10;    #&quot;Trimmed Text ParticipantId&quot; = Table.TransformColumns(#&quot;Cleaned Text ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Trim, type text}}),&#13;&#10;    #&quot;Uppercased Text ParticipantId&quot; = Table.TransformColumns(#&quot;Trimmed Text ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Upper, type text}}),&#13;&#10;    #&quot;Replaced Value IO to I0&quot; = Table.ReplaceValue(#&quot;Uppercased Text ParticipantId&quot;,&quot;IO&quot;,&quot;I0&quot;,Replacer.ReplaceText,{&quot;ParticipantId&quot;}),&#13;&#10;    #&quot;Cleaned Text Reason&quot; = Table.TransformColumns(#&quot;Replaced Value IO to I0&quot;,{{&quot;OverrideReason&quot;, Text.Clean, type text}}),&#13;&#10;    #&quot;Trimmed Text Reason&quot; = Table.TransformColumns(#&quot;Cleaned Text Reason&quot;,{{&quot;OverrideReason&quot;, Text.Trim, type text}}),&#13;&#10;    #&quot;Filtered Rows With Any Empty Values&quot; = Table.SelectRows(#&quot;Trimmed Text Reason&quot;, each [ParticipantId] &lt;&gt; null and [ParticipantId] &lt;&gt; &quot;&quot; and [SleepDate] &lt;&gt; null and [OverrideSleepTime] &lt;&gt; null and [OverrideWakeupTime] &lt;&gt; null)&#13;&#10;in&#13;&#10;    #&quot;Filtered Rows With Any Empty Values&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;SleepTimeAdjustmentsAndOverrides&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Table.NestedJoin(  Table.NestedJoin(MainSleepEpisodes, {&quot;ParticipantId&quot;, &quot;SleepDate&quot;}, CleanEmailSleepMarkers, {&quot;ParticipantId&quot;, &quot;SleepDate&quot;}, &quot;CleanEmailSleepMarkers&quot;, JoinKind.LeftOuter)  , {&quot;ParticipantId&quot;, &quot;SleepDate&quot;} , CleanSleepTimeOverrides , {&quot;ParticipantId&quot;, &quot;SleepDate&quot;} , &quot;CleanSleepTimeOverrides&quot;, JoinKind.LeftOuter),&#13;&#10;    #&quot;Expanded CleanEmailSleepMarkers&quot; = Table.ExpandTableColumn(Source, &quot;CleanEmailSleepMarkers&quot;, {&quot;SleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;}, {&quot;CleanEmailSleepMarkers.SleepOnsetDateTime&quot;, &quot;CleanEmailSleepMarkers.WakeDateTime&quot;}),&#13;&#10;    #&quot;Expanded CleanSleepTimeOverrides&quot; = Table.ExpandTableColumn(#&quot;Expanded CleanEmailSleepMarkers&quot;, &quot;CleanSleepTimeOverrides&quot;, {&quot;OverrideSleepTime&quot;, &quot;OverrideWakeupTime&quot;}, {&quot;CleanSleepTimeOverrides.OverrideSleepTime&quot;, &quot;CleanSleepTimeOverrides.OverrideWakeupTime&quot;}),&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(#&quot;Expanded CleanSleepTimeOverrides&quot;,{&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;, &quot;SleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;, &quot;CleanEmailSleepMarkers.SleepOnsetDateTime&quot;, &quot;CleanEmailSleepMarkers.WakeDateTime&quot;, &quot;CleanSleepTimeOverrides.OverrideSleepTime&quot;, &quot;CleanSleepTimeOverrides.OverrideWakeupTime&quot;}),&#13;&#10;    #&quot;Calc Email Sleep Diff&quot; = Table.AddColumn(#&quot;Removed Other Columns&quot;, &quot;EmailMarkerToActualSleepTimeDifferenceMinutes&quot;, each Duration.TotalMinutes(Duration.From([CleanEmailSleepMarkers.SleepOnsetDateTime] - [SleepOnsetDateTime])), Decimal.Type),&#13;&#10;    #&quot;Calc Email Wake Diff&quot; = Table.AddColumn(#&quot;Calc Email Sleep Diff&quot;, &quot;EmailMarkerToActualWakeTimeDifferenceMinutes&quot;, each Duration.TotalMinutes(Duration.From([CleanEmailSleepMarkers.WakeDateTime] - [WakeDateTime])), Decimal.Type),&#13;&#10;    #&quot;Calc Within Allowed Diff&quot; = Table.AddColumn(#&quot;Calc Email Wake Diff&quot;, &quot;EmailMarkerToActualWithinAllowedTime&quot;, each if ( (Number.Abs([EmailMarkerToActualSleepTimeDifferenceMinutes]) &lt;= #&quot;Self-Report to Actual Allowed Difference&quot; and Number.Abs([EmailMarkerToActualWakeTimeDifferenceMinutes]) &lt;= #&quot;Self-Report to Actual Allowed Difference&quot;) or ([CleanEmailSleepMarkers.SleepOnsetDateTime] = null and [CleanEmailSleepMarkers.WakeDateTime] = null) ) then true else false , Logical.Type),&#13;&#10;    #&quot;Calc Adj Sleep Time&quot; = Table.AddColumn(#&quot;Calc Within Allowed Diff&quot;, &quot;AdjustedSleepOnsetDateTime&quot;, each if [CleanSleepTimeOverrides.OverrideSleepTime] &lt;&gt; null then [CleanSleepTimeOverrides.OverrideSleepTime] else&#13;&#10;if ( Logical.From(#&quot;Auto Adjust Sleep and Wake Times From Self-Reported&quot;) = true and [EmailMarkerToActualSleepTimeDifferenceMinutes] &lt;&gt; null and Number.Abs([EmailMarkerToActualSleepTimeDifferenceMinutes]) &gt; #&quot;Self-Report to Actual Allowed Difference&quot; ) then [CleanEmailSleepMarkers.SleepOnsetDateTime] else [SleepOnsetDateTime] , DateTime.Type),&#13;&#10;    #&quot;Calc Adj Wake Time&quot; = Table.AddColumn(#&quot;Calc Adj Sleep Time&quot;, &quot;AdjustedWakeDateTime&quot;, each if [CleanSleepTimeOverrides.OverrideWakeupTime] &lt;&gt; null then [CleanSleepTimeOverrides.OverrideWakeupTime] else &#13;&#10;if ( Logical.From(#&quot;Auto Adjust Sleep and Wake Times From Self-Reported&quot;) = true and [EmailMarkerToActualWakeTimeDifferenceMinutes] &lt;&gt; null and Number.Abs([EmailMarkerToActualWakeTimeDifferenceMinutes]) &gt; #&quot;Self-Report to Actual Allowed Difference&quot; ) then [CleanEmailSleepMarkers.WakeDateTime] else [WakeDateTime] , DateTime.Type)&#13;&#10;in&#13;&#10;    #&quot;Calc Adj Wake Time&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;Self-Report to Actual Allowed Difference&quot;&gt;&lt;Description&gt;The maximum difference (in minutes) between self-reported sleep/awake values and actual sleep/awake values.&lt;/Description&gt;&lt;Formula&gt;&lt;![CDATA[15 meta [IsParameterQuery=true, List={5, 10, 15, 20, 25, 30, 35, 40, 45}, DefaultValue=15, Type=&quot;Number&quot;, IsParameterQueryRequired=true]]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;Auto Adjust Sleep and Wake Times From Self-Reported&quot;&gt;&lt;Description&gt;When enabled, any sleep and wake times that vary by more than the allowed time from self-reported times (email markers / sleep diary) will automatically be adjusted to fit inside the self-reported time window.&lt;/Description&gt;&lt;Formula&gt;&lt;![CDATA[true meta [IsParameterQuery=true, List={false, true}, DefaultValue=false, Type=&quot;Logical&quot;, IsParameterQueryRequired=true]]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;SleepStagesCalculations&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Table.NestedJoin(CleanFitbitSleepStages, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, SleepTimeAdjustmentsAndOverrides, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, &quot;SleepTimeAdjustmentsAndOverrides&quot;, JoinKind.Inner),&#13;&#10;    #&quot;Expanded SleepTimeAdjustmentsAndOverrides&quot; = Table.ExpandTableColumn(Source, &quot;SleepTimeAdjustmentsAndOverrides&quot;, {&quot;CleanEmailSleepMarkers.SleepOnsetDateTime&quot;, &quot;CleanEmailSleepMarkers.WakeDateTime&quot;, &quot;CleanSleepTimeOverrides.OverrideSleepTime&quot;, &quot;CleanSleepTimeOverrides.OverrideWakeupTime&quot;, &quot;AdjustedSleepOnsetDateTime&quot;, &quot;AdjustedWakeDateTime&quot;}, {&quot;CleanEmailSleepMarkers.SleepOnsetDateTime&quot;, &quot;CleanEmailSleepMarkers.WakeDateTime&quot;, &quot;CleanSleepTimeOverrides.OverrideSleepTime&quot;, &quot;CleanSleepTimeOverrides.OverrideWakeupTime&quot;, &quot;AdjustedSleepOnsetDateTime&quot;, &quot;AdjustedWakeDateTime&quot;}),&#13;&#10;    #&quot;Remove Sleep Stages Outside Adjusted Time Windows&quot; = Table.SelectRows(#&quot;Expanded SleepTimeAdjustmentsAndOverrides&quot;, each [Time] &gt;= [AdjustedSleepOnsetDateTime] and [Time] &lt;= [AdjustedWakeDateTime]),&#13;&#10;    #&quot;Filter Out Short Wakes&quot; = Table.SelectRows(#&quot;Remove Sleep Stages Outside Adjusted Time Windows&quot;, each [ShortWakes] &lt;&gt; &quot;wake&quot;),&#13;&#10;    #&quot;Filter Out Wake Level&quot; = Table.SelectRows(#&quot;Filter Out Short Wakes&quot;, each [Level] &lt;&gt; &quot;wake&quot;),&#13;&#10;    #&quot;Group by LogId, Get Min Max&quot; = Table.Group(#&quot;Filter Out Wake Level&quot;, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, {{&quot;SleepOnsetDateTime&quot;, each List.Min([Time]), type nullable datetime}, {&quot;WakeDateTime&quot;, each List.Max([Time]), type nullable datetime}, {&quot;TotalSleepTime30SecBlocks&quot;, each Table.RowCount(_), Int64.Type}, {&quot;SelfReportedSleepOnsetDateTime&quot;, each List.Min([CleanEmailSleepMarkers.SleepOnsetDateTime]), type nullable datetime}, {&quot;SelfReportedWakeDateTime&quot;, each List.Min([CleanEmailSleepMarkers.WakeDateTime]), type nullable datetime}}),&#13;&#10;    #&quot;Calculate Sleep Date After Diary and Override Adjustments&quot; = Table.AddColumn(#&quot;Group by LogId, Get Min Max&quot;, &quot;SleepDate&quot;, each if Time.From([SleepOnsetDateTime]) &gt;= #time(12,00,00) then Date.From([SleepOnsetDateTime]) else Date.AddDays(Date.From([SleepOnsetDateTime]), -1), Date.Type),&#13;&#10;    #&quot;Reordered Columns SleepDate&quot; = Table.ReorderColumns(#&quot;Calculate Sleep Date After Diary and Override Adjustments&quot;,{&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;, &quot;SleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;}),&#13;&#10;    #&quot;Calculate Sleep Time in Minutes&quot; = Table.AddColumn(#&quot;Reordered Columns SleepDate&quot;, &quot;TotalSleepTimeMinutes&quot;, each [TotalSleepTime30SecBlocks] / 2, Decimal.Type),&#13;&#10;    #&quot;Calculate Sleep Time in Hours&quot; = Table.AddColumn(#&quot;Calculate Sleep Time in Minutes&quot;, &quot;TotalSleepTimeHours&quot;, each ([TotalSleepTime30SecBlocks] / 2) / 60, Decimal.Type),&#13;&#10;    #&quot;Calculate Time in Bed in Minutes&quot; = Table.AddColumn(#&quot;Calculate Sleep Time in Hours&quot;, &quot;TotalTimeInBedMinutes&quot;, each Duration.TotalMinutes([WakeDateTime] - [SleepOnsetDateTime]), Decimal.Type),&#13;&#10;    #&quot;Calculate Time in Bed in Hours&quot; = Table.AddColumn(#&quot;Calculate Time in Bed in Minutes&quot;, &quot;TotalTimeInBedHours&quot;, each Duration.TotalHours([WakeDateTime] - [SleepOnsetDateTime]), Decimal.Type),&#13;&#10;    #&quot;Calculate Awake Time in MInutes&quot; = Table.AddColumn(#&quot;Calculate Time in Bed in Hours&quot;, &quot;TotalAwakeTimeMinutes&quot;, each [TotalTimeInBedMinutes] - [TotalSleepTimeMinutes], Decimal.Type),&#13;&#10;    #&quot;Calculate Awake Time in Hours&quot; = Table.AddColumn(#&quot;Calculate Awake Time in MInutes&quot;, &quot;TotalAwakeTimeHours&quot;, each [TotalTimeInBedHours] - [TotalSleepTimeHours], Decimal.Type),&#13;&#10;    #&quot;Reordered Columns Time in Bed&quot; = Table.ReorderColumns(#&quot;Calculate Awake Time in Hours&quot;,{&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;, &quot;TotalSleepTime30SecBlocks&quot;, &quot;SleepOnsetDateTime&quot;, &quot;SelfReportedSleepOnsetDateTime&quot;, &quot;WakeDateTime&quot;, &quot;SelfReportedWakeDateTime&quot;, &quot;TotalSleepTimeMinutes&quot;, &quot;TotalSleepTimeHours&quot;, &quot;TotalAwakeTimeMinutes&quot;, &quot;TotalAwakeTimeHours&quot;, &quot;TotalTimeInBedMinutes&quot;, &quot;TotalTimeInBedHours&quot;}),&#13;&#10;    #&quot;Removed Columns 30SecBlocks&quot; = Table.RemoveColumns(#&quot;Reordered Columns Time in Bed&quot;,{&quot;TotalSleepTime30SecBlocks&quot;}),&#13;&#10;    #&quot;Calculate Sleep Percentage&quot; = Table.AddColumn(#&quot;Removed Columns 30SecBlocks&quot;, &quot;SleepPercentage&quot;, each [TotalSleepTimeMinutes] / [TotalTimeInBedMinutes], Decimal.Type),&#13;&#10;    #&quot;Calculate Awake Percentage&quot; = Table.AddColumn(#&quot;Calculate Sleep Percentage&quot;, &quot;AwakePercentage&quot;, each [TotalAwakeTimeMinutes] / [TotalTimeInBedMinutes], Decimal.Type),&#13;&#10;    #&quot;Calculate Awake to Sleep Ratio&quot; = Table.AddColumn(#&quot;Calculate Awake Percentage&quot;, &quot;AwakeToSleepRatio&quot;, each Value.Divide([TotalAwakeTimeMinutes], [TotalSleepTimeMinutes]), Decimal.Type),&#13;&#10;    #&quot;Calculate Self Report Sleep Diff&quot; = Table.AddColumn(#&quot;Calculate Awake to Sleep Ratio&quot;, &quot;SelfReportedToActualSleepTimeDifferenceMinutes&quot;, each Duration.TotalMinutes(Duration.From([SelfReportedSleepOnsetDateTime] - [SleepOnsetDateTime])), Decimal.Type),&#13;&#10;    #&quot;Calculate Self Report Wake Diff&quot; = Table.AddColumn(#&quot;Calculate Self Report Sleep Diff&quot;, &quot;SelfReportedToActualWakeTimeDifferenceMinutes&quot;, each Duration.TotalMinutes(Duration.From([SelfReportedWakeDateTime] - [WakeDateTime])), Decimal.Type),&#13;&#10;    #&quot;Calculate Self Report Within Allowed Diff&quot; = Table.AddColumn(#&quot;Calculate Self Report Wake Diff&quot;, &quot;SelfReportedToActualWithinAllowedTime&quot;, each if ( (Number.Abs([SelfReportedToActualSleepTimeDifferenceMinutes]) &lt;= #&quot;Self-Report to Actual Allowed Difference&quot; and Number.Abs([SelfReportedToActualWakeTimeDifferenceMinutes]) &lt;= #&quot;Self-Report to Actual Allowed Difference&quot;) or ([SelfReportedSleepOnsetDateTime] = null and [SelfReportedWakeDateTime] = null) ) then true else false)&#13;&#10;in&#13;&#10;    #&quot;Calculate Self Report Within Allowed Diff&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;fitbit5MinuteHRV_merged&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Csv.Document(File.Contents(#&quot;CSV-Directory&quot; &amp; &quot;\fitbit5MinuteHRV_merged.csv&quot;),[Delimiter=&quot;,&quot;, Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),&#13;&#10;    #&quot;Promoted Headers&quot; = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Promoted Headers&quot;,{{&quot;Id&quot;, type text}, {&quot;Time&quot;, type datetime}, {&quot;RMSSD&quot;, type number}, {&quot;Coverage&quot;, type number}, {&quot;HF&quot;, type number}, {&quot;LF&quot;, type number}, {&quot;SleepDay&quot;, type date}}),&#13;&#10;    #&quot;Renamed Columns ParticipantId&quot; = Table.RenameColumns(#&quot;Changed Type&quot;,{{&quot;Id&quot;, &quot;ParticipantId&quot;}}),&#13;&#10;    #&quot;Uppercased Text ParticipantId&quot; = Table.TransformColumns(#&quot;Renamed Columns ParticipantId&quot;,{{&quot;ParticipantId&quot;, Text.Upper, type text}})&#13;&#10;in&#13;&#10;    #&quot;Uppercased Text ParticipantId&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;CleanFitbit5MinuteHRV&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = fitbit5MinuteHRV_merged,&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(Source,{&quot;ParticipantId&quot;, &quot;Time&quot;, &quot;RMSSD&quot;, &quot;HF&quot;, &quot;LF&quot;})&#13;&#10;in&#13;&#10;    #&quot;Removed Other Columns&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;SleepAndHRVData&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Table.NestedJoin(#&quot;SleepStagesCalculations&quot;, {&quot;ParticipantId&quot;}, CleanFitbit5MinuteHRV, {&quot;ParticipantId&quot;}, &quot;CleanFitbit5MinuteHRV&quot;, JoinKind.LeftOuter),&#13;&#10;    #&quot;Expanded CleanFitbit5MinuteHRV&quot; = Table.ExpandTableColumn(Source, &quot;CleanFitbit5MinuteHRV&quot;, {&quot;Time&quot;, &quot;RMSSD&quot;, &quot;HF&quot;, &quot;LF&quot;}, {&quot;CleanFitbit5MinuteHRV.Time&quot;, &quot;CleanFitbit5MinuteHRV.RMSSD&quot;, &quot;CleanFitbit5MinuteHRV.HF&quot;, &quot;CleanFitbit5MinuteHRV.LF&quot;}),&#13;&#10;    #&quot;Create filter UseHRVRow to exclude rows outside ajusted time windows&quot; = Table.AddColumn(#&quot;Expanded CleanFitbit5MinuteHRV&quot;, &quot;UseHRVRow&quot;, each if [CleanFitbit5MinuteHRV.Time] &lt;&gt; null and  [CleanFitbit5MinuteHRV.Time] &gt;= [SleepOnsetDateTime] and [CleanFitbit5MinuteHRV.Time] + Duration.FromText(&quot;0.0:5:0&quot;) &lt;= [WakeDateTime] then true else false, Logical.Type),&#13;&#10;    #&quot;Filtered Rows UseHRVRow&quot; = Table.SelectRows(#&quot;Create filter UseHRVRow to exclude rows outside ajusted time windows&quot;, each ([UseHRVRow] = true)),&#13;&#10;    #&quot;Removed Columns UseHRVRow&quot; = Table.RemoveColumns(#&quot;Filtered Rows UseHRVRow&quot;,{&quot;CleanFitbit5MinuteHRV.Time&quot;, &quot;UseHRVRow&quot;}),&#13;&#10;    #&quot;Grouped Rows to Get Averages&quot; = Table.Group(#&quot;Removed Columns UseHRVRow&quot;, {&quot;ParticipantId&quot;, &quot;LogId&quot;, &quot;SleepDate&quot;}, {{&quot;AverageRMSSD&quot;, each List.Average([CleanFitbit5MinuteHRV.RMSSD]), type nullable number}, {&quot;AverageHF&quot;, each List.Average([CleanFitbit5MinuteHRV.HF]), type nullable number}, {&quot;AverageLF&quot;, each List.Average([CleanFitbit5MinuteHRV.LF]), type nullable number}})&#13;&#10;in&#13;&#10;    #&quot;Grouped Rows to Get Averages&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;FinalOutput&quot;&gt;&lt;Description&gt;Joins the intermediate tables and performs final formatting.&lt;/Description&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Table.NestedJoin(#&quot;SleepStagesCalculations&quot;, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, SleepAndHRVData, {&quot;ParticipantId&quot;, &quot;LogId&quot;}, &quot;HRV&quot;, JoinKind.LeftOuter),&#13;&#10;    #&quot;Expanded HRV&quot; = Table.ExpandTableColumn(Source, &quot;HRV&quot;, {&quot;AverageRMSSD&quot;, &quot;AverageHF&quot;, &quot;AverageLF&quot;}, {&quot;AverageRMSSD&quot;, &quot;AverageHF&quot;, &quot;AverageLF&quot;}),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Expanded HRV&quot;,{{&quot;AwakeToSleepRatio&quot;, Percentage.Type}}),&#13;&#10;    #&quot;Sorted Rows&quot; = Table.Sort(#&quot;Changed Type&quot;,{{&quot;ParticipantId&quot;, Order.Ascending}, {&quot;SleepDate&quot;, Order.Ascending}, {&quot;SleepOnsetDateTime&quot;, Order.Ascending}}),&#13;&#10;    #&quot;Reordered Columns&quot; = Table.ReorderColumns(#&quot;Sorted Rows&quot;,{&quot;ParticipantId&quot;,&#13;&#10;&quot;LogId&quot;,&#13;&#10;&quot;SleepDate&quot;,&#13;&#10;&quot;SleepOnsetDateTime&quot;,&#13;&#10;&quot;WakeDateTime&quot;,&#13;&#10;&quot;TotalSleepTimeMinutes&quot;,&#13;&#10;&quot;TotalSleepTimeHours&quot;,&#13;&#10;&quot;TotalAwakeTimeMinutes&quot;,&#13;&#10;&quot;TotalAwakeTimeHours&quot;,&#13;&#10;&quot;TotalTimeInBedMinutes&quot;,&#13;&#10;&quot;TotalTimeInBedHours&quot;,&#13;&#10;&quot;SleepPercentage&quot;,&#13;&#10;&quot;AwakePercentage&quot;,&#13;&#10;&quot;AwakeToSleepRatio&quot;,&#13;&#10;&quot;AverageRMSSD&quot;,&#13;&#10;&quot;AverageHF&quot;,&#13;&#10;&quot;AverageLF&quot;,&#13;&#10;&quot;SelfReportedSleepOnsetDateTime&quot;,&#13;&#10;&quot;SelfReportedWakeDateTime&quot;,&#13;&#10;&quot;SelfReportedToActualSleepTimeDifferenceMinutes&quot;,&#13;&#10;&quot;SelfReportedToActualWakeTimeDifferenceMinutes&quot;,&#13;&#10;&quot;SelfReportedToActualWithinAllowedTime&quot;&#13;&#10;})&#13;&#10;in&#13;&#10;    #&quot;Reordered Columns&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
